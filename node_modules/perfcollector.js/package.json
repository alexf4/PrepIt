{
  "name": "perfcollector.js",
  "description": "Simple performance measurement tool for javascript",
  "url": "http://www.fovea.cc/perfcollector/",
  "keywords": [
    "performance",
    "mesure",
    "timer",
    "profiler",
    "profile",
    "optimize"
  ],
  "author": {
    "name": "Jean-Christophe Hoelt",
    "email": "hoelt@fovea.cc"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com:Fovea/perfcollector.git"
  },
  "devDependencies": {
    "docco": "latest",
    "jshint": "latest",
    "uglify-js": "latest"
  },
  "main": "perfcollector.js",
  "version": "0.8.0",
  "license": "MIT",
  "readme": "perfcollector.js\n================\n\nSimple performance measurement tool for javascript.\n\nSimple usage\n------------\n\n    // Initialize a performance collector, enable it.\n    var perfs = PerfCollector.create().enable();\n\n    // Collect statistics about the execution of stuff().\n    perfs.start('stuff');\n    stuff();\n    perfs.end('stuff);\n\n    perfs.logToConsole();\n\nAlternative synthax\n-------------------\n\n    var timer = perfs.start('stuff');\n    timer.end();\n    // or perfs.end(timer);\n\nAnalyze the stats\n-----------------\n\nPerfCollector gives access to the number of time a given timer has been called,\nthe total time, average time and max time spend doing the action.\n\n    > perfs.stats\n    { 'doStuff()': \n        { calls: 500,\n          totalMs: 975,\n          maxMs: 8,\n          averageMs: 1.95,\n          lastMs: 2 },\n      'asyncLoop()': \n        { calls: 5,\n          totalMs: 2967,\n          maxMs: 982,\n          averageMs: 593.4,\n          lastMs: 982 } }\n\n*stats* is a dictionnary whose key are the name of the timers, and values\na set of statistics:\n\n - *calls* - number of calls\n - *totalMs* - total time spend in this timer (in millseconds)\n - *averageMs* - average time spend in this timer (in millseconds)\n - *maxMs* - max time spend in this timer (in millseconds)\n - *lastMs* - time spend during the last call (in millseconds)\n\nDisable\n-------\nWhen PerfCollector is disabled, all function calls do pretty much nothing at all.\nAlso note that a newly create PerfCollector is disabled by default.\n\nTo enable a PerfCollector: `perf.enable()` or `perf.enable(true)`\n\nTo disable a PerfCollector: `perf.disable()` or `perf.enable(false)`\n\nAdvanced usage\n--------------\n\n###Asynchronous functions\n\n    // Keep a reference to the timer (because maybe multiple ajaxXYZ\n    // are running in parralel, so it's important to know which\n    // one we measure).\n    var timer = perfs.start('ajaxXYZ');\n    \n    ajaxXYZ(function () {\n        // The asynchronous request is done, finish the timer\n        timer.end();\n    });\n\n###Name the timer at the end\n\n    // Start an anonymous timer\n    var timer = perfs.start();\n\n    // Perform an action\n    var success = doStuff();\n\n    // End the timer, give it a name depending on what happened.\n    if (success)\n        perfs.end(timer, 'doStuff:success');\n    else\n        perfs.end(timer, 'doStuff:error');\n    \n    // Also possible to write timer.end('doStuff:success')\n\n###Live stats\n\n    function foo () {\n       \n       // Start a timer\n       var fooTimer = perfs.start('foo');\n       \n       // ... do your stuff\n        \n       // Stop the timer and display statistics to the console.\n       fooTimer.end().logToConsole();\n    }\n\n###Reuse a timer in a loop\n\n    var timer = perf.timer('syncStuff()');\n    for (var i = 0; i < 100; ++i) {\n        timer.start();\n        syncStuff();\n        timer.end();\n    }\n\n###Use your own time source\n\n    perf.start('stuff', myAPI.now());\n    \n    // ... do your stuff\n    \n    perf.end('stuff', myAPI.now());\n\nLicence\n-------\n\n(c) 2013, Jean-Christophe Hoelt, Fovea.cc\n\nJackbone is available for use under the MIT software license.\n",
  "readmeFilename": "README.md",
  "_id": "perfcollector.js@0.8.0",
  "dist": {
    "shasum": "8ee519b67425b4bfb9098dbd446f11bd62245e20",
    "tarball": "https://registry.npmjs.org/perfcollector.js/-/perfcollector.js-0.8.0.tgz"
  },
  "_from": "perfcollector.js@*",
  "_npmVersion": "1.2.11",
  "_npmUser": {
    "name": "jchoelt",
    "email": "hoelt@fovea.cc"
  },
  "maintainers": [
    {
      "name": "jchoelt",
      "email": "hoelt@fovea.cc"
    }
  ],
  "directories": {},
  "_shasum": "8ee519b67425b4bfb9098dbd446f11bd62245e20",
  "_resolved": "https://registry.npmjs.org/perfcollector.js/-/perfcollector.js-0.8.0.tgz"
}
